/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define LOWER 1
#define RAISE 2
#define ADJUST 3

/ {
    behaviors {
        tp: tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_PREFERRED";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        lthp: lthp {
            compatible = "zmk,behavior-hold-tap";
            label = "LTHP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
        };

        sftcap: sftcap {
            compatible = "zmk,behavior-tap-dance";
            label = "SFTCAP";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPSLOCK>;
        };

        hr: hr {
            compatible = "zmk,behavior-hold-tap";
            label = "HR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
            flavor = "tap-preferred";
        };
    };

    // Activate ADJUST layer by pressing raise and lower

    conditional_layers {
        compatible = "zmk,conditional-layers";

        adjust_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // --------------------------------------------------------------------------------------------
            // | TAB  |  Q  |  W  |  E  |  R  |    T    |   |  Y  |  U   |  I  |  O  |  P  | ESC |
            // | SHFT |  A  |  S  |  D  |  F  |    G    |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | CTRL |  Z  |  X  |  C  |  V  |    B    |   |  N  |  M   |  ,  |  .  |  /  | SHFT |
            //                    | GUI | LWR | ALT/ENT |   | HYPER/SPC | BKSP  | RSE |

            bindings = <
&kp ESCAPE    &kp Q       &kp W           &kp E         &kp R             &kp T          &kp Y          &kp U              &kp I        &kp O            &kp P                    &kp BACKSPACE
&kp LEFT_ALT  &hr LGUI A  &hr LEFT_ALT S  &hr LCTRL D   &hr LEFT_SHIFT F  &kp G          &kp H          &hr RIGHT_SHIFT J  &hr RCTRL K  &hr RIGHT_ALT L  &hr RIGHT_GUI SEMICOLON  &kp SINGLE_QUOTE
&kp LCTRL     &kp Z       &kp X           &kp C         &kp V             &kp B          &kp N          &kp M              &kp COMMA    &kp DOT          &kp FSLH                 &kp CAPSLOCK
                                          &kp LEFT_GUI  &lthp 2 SPACE     &lthp 1 TAB    &lthp 1 ENTER  &lthp 2 BACKSPACE  &sftcap
            >;
        };

        number {
            // -----------------------------------------------------------------------------------------
            // | ESC |  1  |  2  |  3  |  4  |    5     |   |  6  |  7  |  8  |  9  | 0   | `~   |
            // |     |  Q  |  W  |  E  |  R  |    T     |   |  _  |  +  |  {  |  }  | "|" | SHFT |
            // |     |  A  |  S  |  D  |  F  |    G     |   |  -  |  =  |  [  |  ]  |  \  | SHFT |
            //                     | GUI |     | ALT/ENT |   | HYPER/SPACE | BKSP |    |

            bindings = <
&trans  &kp N1    &kp N2    &kp N3     &kp N4     &kp N5     &kp N6          &kp N7         &kp N8        &kp N9         &kp N0    &kp GRAVE
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &kp ESC    &kp LEFT_ARROW  &kp DOWN       &kp UP_ARROW  &kp RIGHT      &kp HOME  &trans
&trans  &kp F1    &kp F2    &kp F3     &kp F4     &kp F12    &kp LG(LEFT)    &kp PAGE_DOWN  &kp PAGE_UP   &kp RG(RIGHT)  &kp END   &trans
                            &trans     &trans     &trans     &trans          &trans         &trans
            >;
        };

        symbol {
            // -----------------------------------------------------------------------------------------
            // | Prev  |  !   |  @   |  #   |  $   |  %  |            |  ^  |  &  |  *  |  (  |  )  | Next  |
            // | BTCLR | BT1  | BT2  | BT3  |Vol-  |Vol+ |            | LFT | DWN |  UP | RGT | HOME|  END  |
            // |  F12  |  F1  |  F2  |  F3  |  F4  |  F5 |            | F6  | F7  | F8  | F9  | F10 |  F11  |
            //                    |     |     |    |                  |   Play/Pause   |     |     |

            bindings = <
&trans  &kp EXCL        &kp AT    &kp HASH       &kp DLLR   &kp PRCNT          &kp CARET  &kp AMPS   &kp ASTERISK  &kp LPAR  &kp RPAR           &trans
&trans  &kp LGUI        &kp LALT  &kp LCTRL      &kp LSHFT  &kp ESC            &kp PLUS   &kp MINUS  &kp GRAVE     &kp PIPE  &kp APOS           &trans
&trans  &kp LEFT_BRACE  &kp LBKT  &kp LG(LA(C))  &kp RBKT   &kp RIGHT_BRACE    &kp EQUAL  &kp UNDER  &kp TILDE     &kp BSLH  &kp DOUBLE_QUOTES  &trans
                                  &trans         &trans     &trans             &trans     &trans     &trans
            >;
        };

        function {
            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2     &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &kp C_VOLUME_UP  &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &bt BT_CLR    &trans        &kp C_VOL_DN     &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                    &trans           &trans        &trans          &trans  &trans  &trans
            >;
        };
    };
};
